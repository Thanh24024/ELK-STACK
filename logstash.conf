input {
  snmp {
    hosts => [
      { host => "udp:192.168.240.240/161" community => "public" version => "2c" },
      { host => "udp:192.168.10.2/161" community => "public" version => "2c" },
      { host => "udp:192.168.20.2/161" community => "public" version => "2c" }
    ]
    walk => [
      "1.3.6.1.2.1.1.3.0",    # sysUpTime
      "1.3.6.1.2.1.1.5.0",    # sysName
      "1.3.6.1.4.1.9.9.109.1.1.1.1.5",  # CPU 5s
      "1.3.6.1.4.1.9.9.109.1.1.1.1.6",  # CPU 1min
      "1.3.6.1.4.1.9.9.109.1.1.1.1.7",  # CPU 5min
      "1.3.6.1.4.1.9.9.48.1.1.1.5",     # Memory Used
      "1.3.6.1.4.1.9.9.48.1.1.1.6",     # Memory Free
      "1.3.6.1.4.1.9.9.13.1.3.1.3",     # Temperature
      "1.3.6.1.2.1.31.1.1.1.6",         # ifHCInOctets
      "1.3.6.1.2.1.31.1.1.1.10",        # ifHCOutOctets
      "1.3.6.1.2.1.2.2.1.2",            # ifDescr
      "1.3.6.1.2.1.2.2.1.8",            # ifOperStatus

      # OID bổ sung cho Switch
      "1.3.6.1.4.1.9.2.1.8.0",   # Total RAM
      "1.3.6.1.4.1.9.2.1.57.0",  # Free RAM 1
      "1.3.6.1.4.1.9.2.1.58.0",  # Free RAM 2
      "1.3.6.1.4.1.9.2.1.59.0"   # CPU 5min (load)
    ]
    interval => 30
  }
}

filter {
  # Gán thông tin thiết bị
  if [host] == "192.168.240.240" {
    mutate {
      add_field => {
        "device_type" => "router"
        "device_ip" => "192.168.240.240"
        "device_model" => "Cisco C7200"
      }
    }
  } else if [host] == "192.168.10.2" {
    mutate {
      add_field => {
        "device_type" => "switch"
        "device_ip" => "192.168.10.2"
        "device_model" => "Switch L3-1"
      }
    }
  } else if [host] == "192.168.20.2" {
    mutate {
      add_field => {
        "device_type" => "switch"
        "device_ip" => "192.168.20.2"
        "device_model" => "Switch L3-2"
      }
    }
  }

  # Tên thiết bị
  mutate {
    rename => { "1.3.6.1.2.1.1.5.0" => "device_name" }
  }

  # CPU mới
  if [cpmCPUTotal5sec] {
    mutate {
      rename => {
        "cpmCPUTotal5sec" => "cpu_5s_percent"
        "cpmCPUTotal1min" => "cpu_1m_percent"
        "cpmCPUTotal5min" => "cpu_5m_percent"
      }
      add_field => { "metric_type" => "cpu" }
    }
  }

  # CPU cũ
  if [1.3.6.1.4.1.9.2.1.59.0] {
    mutate {
      rename => { "1.3.6.1.4.1.9.2.1.59.0" => "cpu_5min_percent" }
      convert => { "cpu_5min_percent" => "float" }
      add_field => { "metric_type" => "cpu" }
    }
  }

  # RAM mới
  if [ciscoMemoryPoolUsed] and [ciscoMemoryPoolFree] {
    ruby {
      code => "
        used = event.get('ciscoMemoryPoolUsed').to_f
        free = event.get('ciscoMemoryPoolFree').to_f
        total = used + free
        if total > 0
          event.set('memory_used_percent', (used / total * 100).round(2))
          event.set('memory_used_mb', (used / 1024 / 1024).round(2))
          event.set('memory_total_mb', (total / 1024 / 1024).round(2))
        end
      "
    }
    mutate {
      remove_field => ["ciscoMemoryPoolUsed", "ciscoMemoryPoolFree"]
      add_field => { "metric_type" => "memory" }
    }
  }

  # RAM cũ
  if [1.3.6.1.4.1.9.2.1.8.0] and ([1.3.6.1.4.1.9.2.1.57.0] or [1.3.6.1.4.1.9.2.1.58.0]) {
    ruby {
      code => "
        total = event.get('1.3.6.1.4.1.9.2.1.8.0').to_f
        free1 = event.get('1.3.6.1.4.1.9.2.1.57.0') ? event.get('1.3.6.1.4.1.9.2.1.57.0').to_f : 0
        free2 = event.get('1.3.6.1.4.1.9.2.1.58.0') ? event.get('1.3.6.1.4.1.9.2.1.58.0').to_f : 0
        free = free1 + free2
        used = total - free
        if total > 0
          event.set('memory_used_percent', (used / total * 100).round(2))
          event.set('memory_used_mb', (used / 1024 / 1024).round(2))
          event.set('memory_total_mb', (total / 1024 / 1024).round(2))
          event.set('metric_type', 'memory')
        end
      "
    }
    mutate {
      remove_field => [
        "1.3.6.1.4.1.9.2.1.8.0",
        "1.3.6.1.4.1.9.2.1.57.0",
        "1.3.6.1.4.1.9.2.1.58.0"
      ]
    }
  }

  # Nhiệt độ
  if [ciscoEnvMonTemperatureStatusValue] {
    mutate {
      rename => { "ciscoEnvMonTemperatureStatusValue" => "temp_celsius" }
      convert => { "temp_celsius" => "float" }
      add_field => { "metric_type" => "temperature" }
    }
    ruby {
      code => '
        c = event.get("temp_celsius")
        event.set("temp_fahrenheit", (c * 9 / 5 + 32).round(2)) if c
      '
    }
  }

  # Port + Bandwidth
  if [ifHCInOctets] {
    mutate {
      rename => {
        "ifHCInOctets" => "bytes_in"
        "ifHCOutOctets" => "bytes_out"
        "ifDescr" => "interface_name"
        "ifOperStatus" => "interface_status"
      }
      convert => {
        "bytes_in" => "integer"
        "bytes_out" => "integer"
      }
      add_field => { "metric_type" => "bandwidth" }
    }

    ruby {
      code => '
        event.set("bits_in", event.get("bytes_in").to_i * 8)
        event.set("bits_out", event.get("bytes_out").to_i * 8)

        status_map = {1 => "up", 2 => "down", 3 => "testing", 4 => "unknown"}
        if event.get("interface_status")
          event.set("interface_status_name", status_map[event.get("interface_status").to_i] || "unknown")
        end

        if oid_parts = event.get("[SNMP][OID]")&.split(".")
          event.set("interface_id", oid_parts.last.to_i)
        end
      '
    }
  }

  # Cleanup
  mutate {
    remove_field => [
      "[SNMP][OID]",
      "[SNMP][VARBINDS]",
      "long"
    ]
  }

  # Gán timestamp
  date {
    match => ["[sysUpTime]", "ISO8601"]
    target => "@timestamp"
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "cisco-metrics-%{+YYYY.MM.dd}"
    document_id => "%{device_ip}_%{metric_type}_%{+HH:mm:ss}_%{interface_id}"
  }

  stdout {
    codec => rubydebug { metadata => true }
  }
}
