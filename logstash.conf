input {
  udp {
    port => 162
    codec => json
    type => "snmp"
  }
}

filter {
  # Map device name theo IP
  if [host] == "192.168.240.240" {
    mutate { add_field => { "device_name" => "Router_7200" } }
  } else if [host] == "192.168.10.2" {
    mutate { add_field => { "device_name" => "SW1" } }
  } else if [host] == "192.168.20.2" {
    mutate { add_field => { "device_name" => "SW2" } }
  }

  mutate { add_field => { "device_ip" => "%{host}" } }

  # Match interface names
  ruby {
    code => "
      iface_names = {}
      iface_status = {}
      event.to_hash.each do |k, v|
        if k =~ /\.ifDescr\.(\d+)$/
          iface_names[$1] = v
        elsif k =~ /\.ifOperStatus\.(\d+)$/
          iface_status[$1] = v.to_i
        end
      end

      iface_status.each do |id, status|
        name = iface_names[id] || 'ifIndex_' + id
        event.clone.tap do |e|
etc/logstash/conf.d/01-logstash.conf          e.set('interface_name', name)
          e.set('interface_status', status == 1 ? 'up' : 'down')
          e.set('interface_id', id)
          e.set('metric_type', 'interface_status')
          e.remove('@version')
          e.remove('message')
          e.remove('tags')
          e.remove('@timestamp') if e.get('@timestamp').nil?
          event.cancel
          yield e
        end
      end
    "
  }

  # Match traffic: InOctets / OutOctets
  ruby {
    code => "
      in_octets = {}
      out_octets = {}
      event.to_hash.each do |k, v|
        if k =~ /\.ifHCInOctets\.(\d+)$/
          in_octets[$1] = v.to_i
        elsif k =~ /\.ifHCOutOctets\.(\d+)$/
          out_octets[$1] = v.to_i
        end
      end

      in_octets.each do |id, bytes_in|
        bytes_out = out_octets[id] || 0
        event.clone.tap do |e|
          e.set('interface_id', id)
          e.set('interface_name', 'ifIndex_' + id)
          e.set('if_bits_in', bytes_in * 8)
          e.set('if_bits_out', bytes_out * 8)
          e.set('metric_type', 'bandwidth')
          e.remove('@version')
          e.remove('message')
          e.remove('tags')
          e.remove('@timestamp') if e.get('@timestamp').nil?
          event.cancel
          yield e
        end
      end
    "
  }

  # Match CPU
  if [".1.3.6.1.4.1.9.9.109.1.1.1.1.5"] {
    mutate {
      rename => {
        ".1.3.6.1.4.1.9.9.109.1.1.1.1.5" => "cpu_5s"
        ".1.3.6.1.4.1.9.9.109.1.1.1.1.6" => "cpu_1m"
        ".1.3.6.1.4.1.9.9.109.1.1.1.1.7" => "cpu_5m"
      }
      add_field => { "metric_type" => "cpu" }
    }
  }

  # Match RAM
  if [".1.3.6.1.4.1.9.9.48.1.1.1.5"] and [".1.3.6.1.4.1.9.9.48.1.1.1.6"] {
    ruby {
      code => "
        used = event.get('.1.3.6.1.4.1.9.9.48.1.1.1.5').to_f
        free = event.get('.1.3.6.1.4.1.9.9.48.1.1.1.6').to_f
        total = used + free
        if total > 0
          event.set('ram_used_percent', (used / total * 100).round(2))
          event.set('ram_total_mb', (total / 1024 / 1024).round(2))
          event.set('ram_used_mb', (used / 1024 / 1024).round(2))
          event.set('metric_type', 'ram')
        end
      "
    }
  }

  # Match Temperature
  if [".1.3.6.1.4.1.9.9.13.1.3.1.3"] {
    mutate {
      rename => { ".1.3.6.1.4.1.9.9.13.1.3.1.3" => "temperature_c" }
      add_field => { "metric_type" => "temperature" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "network-metrics-%{+YYYY.MM.dd}"
  }

  stdout {
    codec => rubydebug { metadata => false }
  }
}
