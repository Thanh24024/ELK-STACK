input {
  snmp {
    hosts => [
      { host => "udp:192.168.240.240/161" community => "public" version => "2c" },
      { host => "udp:192.168.10.2/161" community => "public" version => "2c" },
      { host => "udp:192.168.20.2/161" community => "public" version => "2c" }
    ]
    walk => [
      "1.3.6.1.2.1.1.3.0",    # sysUpTime
      "1.3.6.1.2.1.1.5.0",    # sysName

      # CPU (Cisco)
      "1.3.6.1.4.1.9.9.109.1.1.1.1.5",
      "1.3.6.1.4.1.9.9.109.1.1.1.1.6",
      "1.3.6.1.4.1.9.9.109.1.1.1.1.7",

      # Memory
      "1.3.6.1.4.1.9.9.48.1.1.1.5",
      "1.3.6.1.4.1.9.9.48.1.1.1.6",

      # Temperature
      "1.3.6.1.4.1.9.9.13.1.3.1.3",

      # Interface
      "1.3.6.1.2.1.31.1.1.1.6",
      "1.3.6.1.2.1.31.1.1.1.10",
      "1.3.6.1.2.1.2.2.1.2",
      "1.3.6.1.2.1.2.2.1.8"
    ]
    interval => 30
  }
}

filter {
  # Gắn tên thiết bị theo IP
  if [host] {
    if [host] == "192.168.240.240" {
      mutate { add_field => { "device_name" => "Router_3725" } }
    } else if [host] == "192.168.10.2" {
      mutate { add_field => { "device_name" => "SW1" } }
    } else if [host] == "192.168.20.2" {
      mutate { add_field => { "device_name" => "SW2" } }
    }
    mutate { add_field => { "device_ip" => "%{host}" } }
  }

  # Đổi tên SNMP OID thành tên dễ đọc
  mutate {
    rename => {
      "1.3.6.1.2.1.1.5.0" => "sys_name"
      "1.3.6.1.4.1.9.9.109.1.1.1.1.5" => "cpu_5s_percent"
      "1.3.6.1.4.1.9.9.109.1.1.1.1.6" => "cpu_1m_percent"
      "1.3.6.1.4.1.9.9.109.1.1.1.1.7" => "cpu_5m_percent"

      "1.3.6.1.4.1.9.9.48.1.1.1.5" => "mem_used"
      "1.3.6.1.4.1.9.9.48.1.1.1.6" => "mem_free"

      "1.3.6.1.4.1.9.9.13.1.3.1.3" => "temperature_c"

      "1.3.6.1.2.1.31.1.1.1.6" => "if_bytes_in"
      "1.3.6.1.2.1.31.1.1.1.10" => "if_bytes_out"
      "1.3.6.1.2.1.2.2.1.2" => "if_name"
      "1.3.6.1.2.1.2.2.1.8" => "if_status"
    }
  }

  # Tính toán RAM, traffic, status
  ruby {
    code => "
      if event.get('mem_used') and event.get('mem_free')
        used = event.get('mem_used').to_f
        free = event.get('mem_free').to_f
        total = used + free
        if total > 0
          event.set('mem_used_percent', (used / total * 100).round(2))
          event.set('mem_total_mb', (total / 1024 / 1024).round(2))
          event.set('mem_used_mb', (used / 1024 / 1024).round(2))
        end
      end

      if event.get('if_bytes_in')
        event.set('if_bits_in', event.get('if_bytes_in').to_i * 8)
        event.set('if_bits_out', event.get('if_bytes_out').to_i * 8)
      end

      if event.get('if_status')
        status_map = {1 => 'up', 2 => 'down', 3 => 'testing'}
        event.set('if_status_name', status_map[event.get('if_status').to_i] || 'unknown')
      end
    "
  }

  mutate {
    convert => {
      "cpu_5s_percent" => "float"
      "cpu_1m_percent" => "float"
      "cpu_5m_percent" => "float"
      "temperature_c" => "float"
    }
    remove_field => ["[SNMP][OID]", "[SNMP][VARBINDS]"]
  }

  date {
    match => ["sysUpTime", "ISO8601"]
    target => "@timestamp"
  }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "network-metrics-%{+YYYY.MM.dd}"
    document_id => "%{device_ip}_%{+HH:mm:ss}_%{if_name}"
  }

  stdout {
    codec => rubydebug {
      metadata => true
    }
  }
}
